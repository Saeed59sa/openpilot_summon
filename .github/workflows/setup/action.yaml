name: 'openpilot env setup'

inputs:
  is_retried:
    description: 'A mock param that asserts that we use the setup-with-retry instead of this action directly'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    # assert that this action is retried using the setup-with-retry
    - shell: bash
      if: ${{ inputs.is_retried == 'false' }}
      run: |
        echo "You should not run this action directly. Use setup-with-retry instead"
        exit 1

    - shell: bash
      name: No retries!
      run: |
        if [ "${{ github.run_attempt }}" -gt 1 ]; then
          echo -e "\033[0;31m##################################################"
          echo -e "\033[0;31m    Retries not allowed! Fix the flaky test!      "
          echo -e "\033[0;31m##################################################\033[0m"
          exit 1
        fi

    # Optimized parallel setup - no Docker build needed
    - shell: bash
      name: Fast environment setup
      run: |
        # Set environment for speed
        export DEBIAN_FRONTEND=noninteractive
        export PYTHONUNBUFFERED=1

        # Create cache directories
        mkdir -p .ci_cache/scons_cache .ci_cache/comma_download_cache .ci_cache/openpilot_cache
        sudo chmod -R 777 .ci_cache/

    # Parallel LFS pull and cache setup
    - shell: bash
      name: Parallel operations
      run: |
        # Git LFS pull in background
        git lfs pull &
        LFS_PID=$!

        # Setup cache in parallel
        echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV

        # Wait for LFS to complete
        wait $LFS_PID

    # Optimized cache restore
    - id: scons-cache
      uses: ./.github/workflows/auto-cache
      with:
        path: .ci_cache/scons_cache
        key: scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}
          scons-${{ runner.arch }}

    # Quick validation without Docker build
    - shell: bash
      name: Environment validation
      run: |
        # Verify scons cache is accessible
        ls -la .ci_cache/scons_cache/

        # Quick test that we can run basic commands
        python3 --version
        scons --version || echo "SCons not available (will be available in container)"

        echo "Setup completed successfully in $(($(date +%s) - $(date +%s -d "$(ps -o lstart= -p $$)"))) seconds"
