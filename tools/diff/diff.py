#!/usr/bin/env python3
import argparse
import time
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor

from openpilot.selfdrive.test.process_replay.process_replay import CONFIGS, replay_process
from openpilot.tools.lib.logreader import LogReader, save_log

SEG_LIST = [
  "d9b97c1d3b8c39b2/0000018b--8a62ed4984/1",
] * 100

# these use cameras/run models which are slow
BLACKLIST_PROCS = ['modeld', 'dmonitoringmodeld']
WHITELIST_PROCS = ['radard']  # TODO: temporary for debugging


def replay(cfgs, seg):
  inputs = list(LogReader(seg))
  t = time.monotonic()
  outputs = replay_process(cfgs, inputs, fingerprint=None, disable_progress=True, t=t)
  print(f"\nTotal time: {time.monotonic() - t} seconds")

  # Remove message generated by the process under test and merge in the new messages
  produces = {o.which() for o in outputs}
  inputs = [i for i in inputs if i.which() not in produces]
  outputs = sorted(inputs + outputs, key=lambda x: x.logMonoTime)
  return outputs


if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="process replay v2",
                                   formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  # parser.add_argument("--fingerprint", help="The fingerprint to use")
  # parser.add_argument("route", help="The route name to use")
  parser.add_argument("-n", type=int, default=8, help="Number of processes to use")
  args = parser.parse_args()

  cfgs = [c for c in CONFIGS if c.proc_name not in BLACKLIST_PROCS and c.proc_name in WHITELIST_PROCS]

  t = time.monotonic()
  with ProcessPoolExecutor(max_workers=args.n) as executor:
    futures = []
    for seg in tqdm(SEG_LIST):
      futures.append(executor.submit(replay, cfgs, seg))

    print('hi')
    for future in tqdm(futures):
      outputs = future.result()

      print('got', len(outputs), 'output messages')

      # fn = f"diff_{seg.replace('/', '_')}.zst"
      # print(f"Saving log to {fn}")
      # save_log(fn, outputs)
  print(f"\nTotal time: {time.monotonic() - t} seconds")
