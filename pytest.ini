[tool:pytest]
# Enable caching to speed up test collection and execution
cache_dir = .pytest_cache

# Ultra-optimized test discovery with specific paths
testpaths = 
    common/tests
    common/transformations/tests
    cereal/messaging/tests
    test_cache_demo
    .
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Enable collection caching, parallelism, and optimizations for sub-1s collection
addopts = 
    --tb=short
    --strict-markers
    --strict-config
    --continue-on-collection-errors
    --cache-clear-after-run=false
    --durations=0
    --durations-min=5
    -n auto
    -p no:anyio
    -p no:typeguard
    -p no:langsmith
    -p no:faker
    -p no:doctest
    -p no:pastebin
    -p no:junitxml
    -p no:legacypath
    -p no:faulthandler
    # Uncomment one of these for faster collection:
    # --lf  # Run only last failed tests (fastest for debugging)
    # --ff  # Run failed tests first, then the rest
    # -n 8   # Use specific number of workers instead of auto
    
# Performance optimizations
norecursedirs = .git .tox dist build *.egg .pytest_cache .mypy_cache __pycache__
minversion = 6.0

# Environment variables to reduce plugin overhead
setenv =
    PYTEST_DISABLE_PLUGIN_AUTOLOAD=1

# Markers to avoid warnings
markers =
    tici: marks tests as tici specific
    nocapture: don't capture test output  
    shared_download_cache: share download cache between tests
    xdist_group_class_property: group tests by a property of the class that contains them
    skip_tici_setup: skip tici setup for this test
    slow: marks tests as slow (use -m "not slow" to skip them)
